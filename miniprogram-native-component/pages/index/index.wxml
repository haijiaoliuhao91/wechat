<!-- 
  小程序中的部分组件是由客户端创建的原生组件
  这些组件有 camera、canvas、input(仅在focus时表现为原生组件)、live-player、live-pusher、map、textarea、video 等8个

  原生组件的使用限制
  由于原生组件脱离在 WebView 渲染流程外，因此在使用时有以下使用限制：
  1、原生组件的层级是最高的，所以页面中的其它组件无论如何设置 z-index 为多少，都无法盖在原生组件上
  (1) 后插入的原生组件可以覆盖之前的原生组件
  2、原生组件无法在picker-view中使用
  (1) 基础库2.4.4以下版本，原生组件不支持在 scroll-view、swiper、movable-view 中使用
  3、部分CSS样式无法应用于原生组件，例如：
  (1) 无法对原生组件设置CSS动画
  (2) 无法定义原生组件为 position: fixed
  (3) 不能在父级节点使用 overflow: hidden 来裁剪原生组件的显示区域
  4、原生组件的事件监听不能使用 bind:eventname 的写法，只支持 bindeventname。原生组件也不支持 catch 和 capture 的事件绑定方式
  5、原生组件会遮挡 vConsole 弹出的调试面板。在工具上，原生组件是用 Web 组件模拟的，因此很多情况下不能很好的还原真机的表现，建议在使用用原生组件时尽量在真机上调试

  cover-view与cover-image
  为了解决原生组件层级最高的限制。小程序专门提供了 cover-view 和 cover-image 组件，可以覆盖在部分原生组件上面。这两个组件也是原生组件，但是在使用限制与其它原生组件有所不同

  原生组件同层渲染
  同层渲染是为了解决原生组件的层级问题，在支持同层渲染后，原生组件与其它组件可以随意叠加，有关层级的限制将不再存在。但需要注意的是，组件内部仍由原生渲染，样式一般还是对原生组件内部无效。当前 video、map、live-player、live-pusher、canvas(2d) 组件已支持同层渲染

  原生组件相对层级
  为了可以调整原生组件之间的相对层级位置，小程序在 v2.7.0 及以上版本支持在样式中声明 z-index 来指定原生组件的层级。该 z-index 仅调整原生组件之间的层级顺序，其层级仍高于其他非原生组件

 -->